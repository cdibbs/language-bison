"name": "Jison"
scopeName: "source.jison"
fileTypes: [
  "jison"
]
patterns: [
  {
    begin: "^(%%)$"                             # Has to be the first pattern
    comment: "Match from first %% symbol to EOF"
    captures:
      0:
        name: "meta.separator.section.jison"    # Match first %% symbol
    patterns: [
      {
        begin: "^(%%)$"                         # Has to be the first pattern
        comment: "Match from second %% symbol to EOF"
        captures:
          0:
            name: "meta.separator.section.jison"# Match second %% symbol
        patterns: [
          {
            name:  "meta.section.epilogue.jison"
            begin: "(?!%%)"
            patterns: [include: "#epilogue_section"]
          }
        ]
      }
      {
        name:  "meta.section.rules.jison"
        begin: "(?!%%)"
        end:   "(?=%%)"
        patterns: [include: "#rules_section"]
      }
    ]
  }
  {
    name:  "meta.section.declarations.jison"
    begin: "(?!%%)"
    end:   "(?=%%)"
    patterns: [include: "#declarations_section"]
  }
]

repository:
  declarations_section:
    patterns: [
      {
        name:  "meta.section.prologue.jison"
        begin: "(?=%\\{)"
        end:   "(?<=%\\})"
        patterns: [include: "#user_code_blocks"]
      }

      {
        include: "#declarations"
      }
      {
        include: "#comments"
        comment: "jison supports Javascript comments"
      }
    ]

  rules_section:
    patterns: [
      {
        include: "#comments"
        comment: "jison supports C/C++ comments"
      }
      {include: "#actions"}
      {
        include: "#rules"
      }
    ]

  epilogue_section:
    patterns: [
      {
        include: "source.js"
        comment: "Epilogue contains Javascript code only"
      }
    ]


  declarations:
    patterns: [
      {
        include: "#directives"
      }
      {
        include: "#types"
      }
      {
        include: "#symbols"
      }
      {
        include: "#numbers"
      }
      {
        include: "#block"
      }
      {
        include: "#strings"
      }
      {
        match: "\\;"
        comment: "Semicolon can be only at the end of a union"
        name: "punctuation.union-declaration.end.jison"
      }
    ]
  rules:
    patterns: [
      {
        begin: "([a-zA-Z_.\-][a-zA-Z_.\-0-9]*)[ \\t\\n\\r]*(:)"
        end: ";"
        beginCaptures:
          1:
            name: "variable.grammar-rule.token-def.jison"
            comment: "Match the result of the grammar rule"
          2:
            name: "punctuation.grammar-rule.result-separator.jison"     # :
        endCaptures:
          0:
            name: "punctuation.grammar-rule.end.jison"
        comment: "Match grammar rules, second section only"
        name: "meta.grammar-rule.jison"
        patterns: [
          {
            include: "#components"
          }
        ]
      }
    ]
  components:
    patterns: [
      {
        begin: "(?=([a-zA-Z_.\-][a-zA-Z_.\-0-9]*)?)"  # (?) Comp can be empty
        end: "\\||(?=;)"
        endCaptures:
          0:
            name: "punctuation.grammar-rule.component-separator.jison"  # |
        comment: "Match each component in a grammar rule"
        name: "meta.section.component.jison"
        patterns: [
          {
            include: "#comments"
            comment: "Comments can be also inside grammar components"
          }
          {
            begin: "'"
            beginCaptures:
              0:
                name: "punctuation.definition.string.begin.jison"
            end: "'"
            endCaptures:
              0:
                name: "punctuation.definition.string.end.jison"
            comment: "Match single character tokens inside components"
            name: "string.quoted.single.character-token.jison"
            patterns: [
              #TODO {
              #  include: "#string_escaped_char"
              #}
              # {
              #  include: "#line_continuation_character"
              #}
            ]
          }
          {
            include: "#directives"
          }
          {
            include: "#symbols"
          }
          {
            include: "#rule_actions"
          }
        ]
      }
    ]
  directives:
    patterns: [
      {
        match: "%[a-z\-]+"
        comment: "Match %-directives"
        name: "keyword.control.directive.jison"
      }
    ]
  symbols:
    patterns: [
      {
        match: "[a-zA-Z_.\-][a-zA-Z_.\-0-9]*"
        comment: "Match valid symbols"
        name: "variable.grammar-rule.token-type.jison"
      }
    ]
  types:
    patterns: [
      {
        begin: "<"
        end: ">"
        beginCaptures:
          0:
            name: "punctuation.type-declaration.begin.jison"
        endCaptures:
          0:
            name: "punctuation.type-declaration.end.jison"
        comment: "Match type declarations"
        patterns: [
          {
            match: "[$a-zA-Z\_][$a-zA-Z0-9\_]*"
            comment: "A valid JS identifier"
          }
        ]
      }
    ]

  actions:
    patterns: [
      {
        name:  "meta.action.jison"
        begin: "\\{\\{"
        end:   "\\}\\}"
        beginCaptures: 0: name: "punctuation.definition.action.begin.jison"
        endCaptures:   0: name: "punctuation.definition.action.end.jison"
        patterns: [include: "source.js"]
      },{
        name:  "meta.action.jison"
        begin: "(?=%\\{)"
        end:   "(?<=%\\})"
        patterns: [include: "#user_code_blocks"]
      }
    ]
  rule_actions:
    patterns: [
      {include: "#actions"}
      {
        name: "meta.action.jison"
        begin: "\\{"
        end:   "\\}"
        beginCaptures: 0: name: "punctuation.definition.action.begin.jison"
        endCaptures:   0: name: "punctuation.definition.action.end.jison"
        patterns: [include: "source.js"]
      }
      {
        name:  "meta.action.jison"
        begin: "->"
        end:   "((//).*)?(?=$)"
        beginCaptures:
          0: name: "punctuation.definition.action.arrow.jison"
        endCaptures:
          1: name: "comment.line.double-slash.js"
          2: name: "punctuation.definition.comment.js"
        # TODO: The end pattern is based on the comment.line.double-slash.js
        # pattern in
        # https://github.com/atom/language-javascript/blob/master/grammars/javascript.cson.
        # The end pattern of comment.line.double-slash.js is itself $, so $
        # can’t be the end pattern here because it will never be matched. Is
        # there an end pattern that can be used here that doesn’t duplicate a
        # JavaScript grammar pattern?
        patterns: [include: "source.js"]
      }
    ]

  comments:
    patterns: [
      {
        name: "comment.line.double-slash.jison"
        match: "//.*$"
      }
      {
        contentName: "comment.block.jison"
        begin: "/\\*"
        end: "\\*/"
        captures:
          0:
            name: "punctuation.definition.comment.jison"
      }
    ]
  numbers:
    patterns: [
      {
        match: "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b"
        name: "constant.numeric.c"
      }
    ]
  block:
    patterns: [
      {
        begin: "\\{"
        beginCaptures:
          0:
            name: "punctuation.section.block.begin.c"
        end: "\\}|(?=\\s*#\\s*endif\\b)"
        endCaptures:
          0:
            name: "punctuation.section.block.end.c"
        name: "meta.block.c"
        patterns: [
          {
            include: "source.js"
          }
        ]
      }
    ]

  user_code_blocks:
    patterns: [
      {
        name:  "meta.user-code-block.jison"
        begin: "%\\{"
        end:   "%\\}"
        beginCaptures: 0: name: "punctuation.definition.user-code-block.begin.jison"
        endCaptures:   0: name: "punctuation.definition.user-code-block.end.jison"
        patterns: [include: "source.js"]
      }
    ]


# These are from https://github.com/GerHobbelt/jison/blob/master/lib/jison.js.
injections:
  "L:meta.action.jison -(comment | string), source.js.embedded.source":
    patterns: [
      {
        name:  "variable.language.semantic-value.jison"
        match: "\\${2}"
      },{
        name:  "variable.language.result-location.jison"
        match: "@\\$"
      },{
        name:  "variable.language.stack-index-0.jison"
        match: "##\\$|\\byysp\\b"
      },{
        name:  "support.variable.token-reference.jison"
        match: "#\\S+#"
      },{
        name:  "variable.language.result-id.jison"
        match: "#\\$"
      },{
        name:  "support.variable.token-value.jison"
        match: "\\$(?:-?\\d+|[\\p{Alpha}_](?:[\\w-]*\\w)?)"
      },{
        name:  "support.variable.token-location.jison"
        match: "@(?:-?\\d+|[\\p{Alpha}_](?:[\\w-]*\\w)?)"
      },{
        name:  "support.variable.stack-index.jison"
        match: "##(?:-?\\d+|[\\p{Alpha}_](?:[\\w-]*\\w)?)"
      },{
        name:  "support.variable.token-id.jison"
        match: "#(?:-?\\d+|[\\p{Alpha}_](?:[\\w-]*\\w)?)"
      },{
        name:  "keyword.other.jison"
        match: "\\byy(?:clearin|erro[kr])\\b"
      }
    ]
