"name": "Jison Lex"
scopeName: "source.jisonlex"
fileTypes: ["jisonlex"]

patterns: [
  {
    # Like Flex (https://westes.github.io/flex/manual/Format.html), Jison Lex
    # files are divided into three sections separated by %%:
    #   definitions
    #   %%
    #   rules
    #   %%
    #   user code
    # Flex has the additional requirement that the %% must be the only thing in
    # a line, but that’s not the case for the separator between definitions and
    # rules in Jison Lex.
    begin: "%%"
    beginCaptures: 0: name: "meta.separator.section.jisonlex"
    patterns: [
      {
        # The separator between rules and user code in Jison Lex must be at the
        # beginning of a line.
        begin: "^%%"
        beginCaptures: 0: name: "meta.separator.section.jisonlex"
        patterns: [
          {
            name:  "meta.section.user-code.jisonlex"
            begin: "(?!%%)"
            patterns: [include: "#user_code_section"]
          }
        ]
      },{
        name:  "meta.section.rules.jisonlex"
        begin: "(?!%%)"
        end:   "(?=^%%)"
        patterns: [include: "#rules_section"]
      }
    ]
  },{
    name:  "meta.section.definitions.jisonlex"
    begin: "(?!%%)"
    end:   "(?=%%)"
    patterns: [include: "#definitions_section"]
  }
]

repository:
  definitions_section:
    patterns: [
      {include: "source.jison#comments"}

      {
        name:  "meta.definition.jisonlex"
        begin: "\\b[\\p{Alpha}_](?:[\\w-]*\\w)?\\b"
        end:   "$"
        beginCaptures: 0: name: "entity.name.variable.jisonlex"
        patterns: [
          {include: "source.jison#comments"}
          {
            name:  "string.regexp.jisonlex"
            begin: "(?=\\S)"
            end:   "(?=\\s)"
            patterns: [include: "#regexp"]
          }
        ]
      },{
        name:  "meta.start-condition.jisonlex"
        begin: "%[sx]\\b"
        end:   "$"
        beginCaptures: 0: name: "keyword.other.start-condition.jisonlex"
        patterns: [
          {include: "source.jison#comments"}
          {
            name:  "entity.name.function.jisonlex"
            match: "\\b[\\p{Alpha}_](?:[\\w-]*\\w)?\\b"
          },{
            name:  "invalid.illegal.jisonlex"
            match: "\\S"
          }
        ]
      }
      {include: "source.jison#options_declarations"}
      {
        name:  "invalid.unimplemented.jisonlex"
        match: "%(?:array|pointer)"
      }
      {include: "source.jison#user_code_blocks"}
    ]

  rules_section:
    patterns: [
      {include: "source.jison#comments"}
      {
        name:  "meta.start-conditions.jisonlex"
        begin: "(?:^|(?<=%\\}))<(?!<EOF>>)"
        end:   ">"
        beginCaptures: 0: name: "punctuation.definition.start-conditions.begin.jisonlex"
        endCaptures:   0: name: "punctuation.definition.start-conditions.end.jisonlex"
        patterns: [
          {
            name:  "keyword.other.jisonlex"
            match: "\\bINITIAL\\b"
          },{
            name:  "entity.name.function.jisonlex"
            match: "\\b[\\p{Alpha}_](?:[\\w-]*\\w)?\\b"
          },{
            name:  "punctuation.separator.start-condition.jisonlex"
            match: ","
          },{
            name:  "keyword.other.any-start-condition.jisonlex"
            match: "(?<=<)\\*(?=>)"
          },{
            name:  "invalid.illegal.jisonlex"
            match: "."
          }
        ]
      },{
        name:  "meta.rule.action.jisonlex"
        begin: "(?=%\\{)"
        end:   "(?<=%\\})"
        patterns: [include: "source.jison#user_code_blocks"]
      },{
        name:  "string.regexp.jisonlex"
        begin: "(?:^|(?<=>|%\\}))(?=\\S)"
        end:   "(?=\\s|%\\{)"
        patterns: [include: "#regexp"]
      },{
        name:  "meta.rule.action.jisonlex"
        begin: "(?=\\S)"
        end:   "((//).*)?(?=$)"
        endCaptures:
          1: name: "comment.line.double-slash.js"
          2: name: "punctuation.definition.comment.js"
        # TODO: See the arrow (->) action in the Jison grammar for what’s going
        # on with the duplicated JavaScript comment patterns.
        patterns: [
          {include: "source.jison#include_declarations"}
          {include: "source.js"}
        ]
      }
    ]

  user_code_section:
    patterns: [
      {include: "source.js"}
    ]


  name_uses:
    patterns: [
      {
        name:  "variable.other.jisonlex"
        match: "\\{[\\p{Alpha}_](?:[\\w-]*\\w)?\\}"
      }
    ]

  # TODO: Can the regexp patterns be replaced with language-regexp
  # (https://github.com/Alhadis/language-regexp) and some injections?
  regexp:
    patterns: [
      # Comments are allowed in Jison Lex regex patterns.
      {include: "source.jison#comments"}
      # These patterns are supported by JavaScript.
      {
        name:  "keyword.other.character-class.any.regexp.jisonlex"
        match: "\\."
      },{
        name:  "keyword.other.anchor.word-boundary.regexp.jisonlex"
        match: "\\\\b"
      },{
        name:  "keyword.other.anchor.non-word-boundary.regexp.jisonlex"
        match: "\\\\B"
      },{
        name:  "keyword.other.anchor.start-of-input.regexp.jisonlex"
        match: "\\^"
      },{
        name:  "keyword.other.anchor.end-of-input.regexp.jisonlex"
        match: "\\$"
      },{
        name:  "keyword.other.back-reference.regexp.jisonlex"
        match: "\\\\[1-9]\\d*"
      },{
        name:  "keyword.operator.quantifier.regexp.jisonlex"
        match: "(?:[+*?]|\\{(?:\\d+(?:,(?:\\d+)?)?|,\\d+)\\})\\??"
      },{
        name:  "keyword.operator.alternation.regexp.jisonlex"
        match: "\\|"
      },{
        name:  "meta.non-capturing.group.regexp.jisonlex"
        begin: "\\(\\?:"
        end:   "\\)"
        beginCaptures: 0: name: "punctuation.definition.group.begin.regexp.jisonlex"
        endCaptures:   0: name: "punctuation.definition.group.end.regexp.jisonlex"
        patterns: [include: "#regexp"]
      },{
        name:  "meta.lookahead.assertion.regexp.jisonlex"
        begin: "\\(\\?="
        end:   "\\)"
        beginCaptures: 0: name: "punctuation.definition.group.begin.regexp.jisonlex"
        endCaptures:   0: name: "punctuation.definition.group.end.regexp.jisonlex"
        patterns: [include: "#regexp"]
      },{
        name:  "meta.negative.lookahead.assertion.regexp.jisonlex"
        begin: "\\(\\?!"
        end:   "\\)"
        beginCaptures: 0: name: "punctuation.definition.group.begin.regexp.jisonlex"
        endCaptures:   0: name: "punctuation.definition.group.end.regexp.jisonlex"
        patterns: [include: "#regexp"]
      },{
        name:  "meta.group.regexp.jisonlex"
        begin: "\\("
        end:   "\\)"
        beginCaptures: 0: name: "punctuation.definition.group.begin.regexp.jisonlex"
        endCaptures:   0: name: "punctuation.definition.group.end.regexp.jisonlex"
        patterns: [include: "#regexp"]
      },{
        name:  "constant.other.character-class.set.regexp.jisonlex"
        begin: "(\\[)(\\^)?"
        end:   "\\]"
        beginCaptures:
          1: name: "punctuation.definition.character-class.begin.regexp.jisonlex"
          2: name: "keyword.operator.negation.regexp.jisonlex"
        endCaptures:
          0: name: "punctuation.definition.character-class.end.regexp.jisonlex"
        patterns: [
          {include: "#name_uses"}
          {include: "#regexp_character_class"}
        ]
      }
      {include: "#regexp_character_class"}
      # These patterns are specific to Jison Lex.
      {include: "#name_uses"}
      {include: "source.jison#quoted_strings"}
      {
        name:  "keyword.other.eof.regexp.jisonlex"
        match: "<<EOF>>"
      },{
        name:  "keyword.operator.negative.lookahead.regexp.jisonlex"
        match: "/!"
      },{
        name:  "keyword.operator.lookahead.regexp.jisonlex"
        match: "/"
      }
    ]

  regexp_character_class:
    patterns: [
      # Character classes from
      # https://github.com/atom/language-javascript/blob/master/grammars/regular%20expressions%20(javascript).cson
      # and
      # https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp
      {
        name:  "constant.character.escape.character-class.word.regexp.jisonlex"
        match: "\\\\w"
      },{
        name:  "constant.character.escape.character-class.non-word.regexp.jisonlex"
        match: "\\\\W"
      },{
        name:  "constant.character.escape.character-class.space.regexp.jisonlex"
        match: "\\\\s"
      },{
        name:  "constant.character.escape.character-class.non-space.regexp.jisonlex"
        match: "\\\\S"
      },{
        name:  "constant.character.escape.character-class.digit.regexp.jisonlex"
        match: "\\\\d"
      },{
        name:  "constant.character.escape.character-class.non-digit.regexp.jisonlex"
        match: "\\\\D"
      },{
        name:  "constant.character.escape.character-class.control.regexp.jisonlex"
        match: "\\\\c[A-Z]"
      }
      # https://github.com/atom/language-javascript/blob/master/grammars/javascript.cson
      {include: "source.js#string_escapes"}
    ]
